title: Election
on-arrival: {!
// calculate normalized class voting amounts
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}

// 1. calculate support for each of the parties
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        party_support += Q[c]*Q[c+'_'+party];
    }
    Q[party + '_support'] = party_support;
}

// 2. normalize support
Q.total_support = Q.spd_support + Q.z_support + Q.kpd_support + Q.ddp_support + Q.dvp_support + Q.dnvp_support + Q.nsdap_support + Q.other_support;
Q.spd_normalized = Q.spd_support/Q.total_support;
Q.z_normalized = Q.z_support/Q.total_support;
Q.kpd_normalized = Q.kpd_support/Q.total_support;
Q.ddp_normalized = Q.ddp_support/Q.total_support;
Q.dvp_normalized = Q.dvp_support/Q.total_support;
Q.dnvp_normalized = Q.dnvp_support/Q.total_support;
Q.nsdap_normalized = Q.nsdap_support/Q.total_support;
Q.other_normalized = Q.other_support/Q.total_support;

// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
Q.spd_votes = Math.round(Q.spd_normalized*100);
Q.z_votes = Math.round(Q.z_normalized*100);
Q.kpd_votes = Math.round(Q.kpd_normalized*100);
Q.ddp_votes = Math.round(Q.ddp_normalized*100);
Q.dvp_votes = Math.round(Q.dvp_normalized*100);
Q.dnvp_votes = Math.round(Q.dnvp_normalized*100);
Q.nsdap_votes = Math.round(Q.nsdap_normalized*100);
Q.other_votes = Math.round(Q.other_normalized*100);

!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.
